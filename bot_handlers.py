import asyncio
import random
import re
import speech_recognition as sr
import requests
import io
import os
import tempfile
import subprocess
from telethon import events, functions, types
from config import CHANNEL_ID, KEYWORDS_FOR_HEART

class BotStatus:
    def __init__(self):
        self.is_running = False
        self.last_error: str | None = None
        self.commands_processed = 0
        self.reactions_sent = 0
        self.messages_processed = 0

status = BotStatus()

def register_handlers(client):
    """Register all bot event handlers"""
    
    @client.on(events.NewMessage(pattern=r'/gayporn|/random'))
    async def send_random_from_channel(event):
        """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É"""
        try:
            status.commands_processed += 1
            print(f"Processing /random command from user {event.sender_id}")
            
            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 100000 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –∫–∞–Ω–∞–ª—É
            messages = []
            async for message in client.iter_messages(CHANNEL_ID, limit=100000):
                if message.text or message.media:
                    messages.append(message)
            
            if messages:
                random_message = random.choice(messages)
                print(f"Sending random message: {random_message.id}")
                
                # –ü–µ—Ä–µ—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ reply
                if random_message.media:
                    await event.reply(file=random_message.media, message=random_message.text or "")
                else:
                    await event.reply(random_message.text)
            else:
                await event.reply("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –∫–∞–Ω–∞–ª—ñ")
                
        except Exception as e:
            error_msg = f"–ü–æ–º–∏–ª–∫–∞: {str(e)}"
            status.last_error = error_msg
            print(f"Error in random command: {e}")
            await event.reply(error_msg)

    @client.on(events.NewMessage(pattern=r'/voice'))
    async def voice_to_text(event):
        """–†–æ–∑–ø—ñ–∑–Ω–∞—î –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –∫–æ–Ω–≤–µ—Ä—Ç—É—î –≤ —Ç–µ–∫—Å—Ç"""
        if not event.is_reply:
            await event.reply("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —Ü—é –∫–æ–º–∞–Ω–¥—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            return
        
        try:
            status.commands_processed += 1
            print(f"Processing /voice command from user {event.sender_id}")
            
            reply_message = await event.get_reply_message()
            
            if not reply_message.voice:
                await event.reply("‚ùå –¶–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
                return
            
            await event.reply("üé§ –û–±—Ä–æ–±–ª—è—é –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è...")
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤—É –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
            with tempfile.TemporaryDirectory() as temp_dir:
                # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥–æ–ª–æ—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                voice_file = await reply_message.download_media(file=temp_dir)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ OGG –≤ WAV –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é ffmpeg
                wav_file = os.path.join(temp_dir, 'audio.wav')
                
                try:
                    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ subprocess –∑–∞–º—ñ—Å—Ç—å os.system –¥–ª—è –∫—Ä–∞—â–æ—ó –±–µ–∑–ø–µ–∫–∏
                    subprocess.run([
                        'ffmpeg', '-i', voice_file, '-ar', '16000', 
                        wav_file, '-y'
                    ], check=True, capture_output=True)
                except subprocess.CalledProcessError as e:
                    await event.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—ó –∞—É–¥—ñ–æ. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—å, —â–æ ffmpeg –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
                    return
                except FileNotFoundError:
                    await event.reply("‚ùå ffmpeg –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å ffmpeg –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≥–æ–ª–æ—Å–æ–≤–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏.")
                    return
                
                # –†–æ–∑–ø—ñ–∑–Ω–∞—î–º–æ –º–æ–≤—É
                recognizer = sr.Recognizer()
                try:
                    with sr.AudioFile(wav_file) as source:
                        audio_data = recognizer.record(source)
                except Exception as e:
                    await event.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —á–∏—Ç–∞–Ω–Ω—è –∞—É–¥—ñ–æ—Ñ–∞–π–ª—É: {str(e)}")
                    return
                
                # –°–ø—Ä–æ–±—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É –≤ —Ä—ñ–∑–Ω–∏—Ö –º–æ–≤–∞—Ö
                languages = [
                    ('uk-UA', '—É–∫—Ä–∞—ó–Ω—Å—å–∫–∞'),
                    ('ru-RU', '—Ä–æ—Å—ñ–π—Å—å–∫–∞'),
                    ('en-US', '–∞–Ω–≥–ª—ñ–π—Å—å–∫–∞')
                ]
                
                recognized = False
                for lang_code, lang_name in languages:
                    try:
                        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–µ—Ç–æ–¥ recognize_google –∑ speech_recognition
                        text = recognizer.recognize_google(audio_data, language=lang_code)
                        await event.reply(f"üìù –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç ({lang_name}):\n\n{text}")
                        recognized = True
                        break
                    except sr.UnknownValueError:
                        continue
                    except sr.RequestError as e:
                        await event.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤—ñ—Å—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è: {e}")
                        return
                    except Exception as e:
                        continue
                
                if not recognized:
                    await event.reply("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –º–æ–≤—É –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ")
                    
        except Exception as e:
            error_msg = f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}"
            status.last_error = error_msg
            print(f"Error in voice command: {e}")
            await event.reply(error_msg)

    @client.on(events.NewMessage)
    async def auto_reactions_and_responses(event):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ä–µ–∞–∫—Ü—ñ—ó —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ"""
        if not event.text:
            return
        
        try:
            status.messages_processed += 1
            message_text = event.text.lower()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–ª—é—á–æ–≤–∏—Ö —Å–ª—ñ–≤ –¥–ª—è —Ä–µ–∞–∫—Ü—ñ—ó ‚ù§Ô∏è‚Äçüî•
            original_text = event.text  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ @ —Å–∏–º–≤–æ–ª–∞–º–∏
            for keyword in KEYWORDS_FOR_HEART:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ –¥–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —Å–ª—ñ–≤
                if keyword.startswith('@'):
                    # –î–ª—è –Ω—ñ–∫–Ω–µ–π–º—ñ–≤ –∑ @ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ –≤ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ, —ñ –±–µ–∑ @
                    if keyword.lower() in message_text or keyword[1:].lower() in message_text:
                        found_keyword = keyword
                    else:
                        continue
                else:
                    # –î–ª—è –∑–≤–∏—á–∞–π–Ω–∏—Ö —Å–ª—ñ–≤ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –≤ –Ω–∏–∂–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ  
                    if keyword.lower() in message_text:
                        found_keyword = keyword
                    else:
                        continue
                
                # –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ –∑–±—ñ–≥ - –Ω–∞–¥—Å–∏–ª–∞—î–º–æ —Ä–µ–∞–∫—Ü—ñ—é
                try:
                    await client(functions.messages.SendReactionRequest(
                        peer=event.chat_id,
                        msg_id=event.id,
                        reaction=[types.ReactionEmoji(emoticon='‚ù§Ô∏è‚Äçüî•')],
                        big=False,
                        add_to_recent=True
                    ))
                    status.reactions_sent += 1
                    print(f"Sent heart reaction for keyword: {found_keyword} (found in: '{event.text[:50]}...')")
                    break
                except Exception as e:
                    print(f"Failed to send reaction for {found_keyword}: {e}")
                    pass  # –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –∑ —Ä–µ–∞–∫—Ü—ñ—è–º–∏
            
            # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ"
            if '—Å–ª–∞–≤–∞ —É–∫—Ä–∞—ó–Ω—ñ' in message_text:
                await event.reply('–ì–µ—Ä–æ—è–º —Å–ª–∞–≤–∞!')
                print("Responded to '–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ'")
            
            # –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è "–ü—É—Ç—ñ–Ω"
            if '–ø—É—Ç—ñ–Ω' in message_text:
                await event.reply('–ü—É—Ç—ñ–Ω —Ö—É–π–ª–æ')
                print("Responded to '–ü—É—Ç—ñ–Ω'")
                
        except Exception as e:
            print(f"Error in auto reactions: {e}")
            status.last_error = str(e)

    @client.on(events.NewMessage(pattern=r'/status'))
    async def bot_status(event):
        """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        try:
            status_text = f"""
ü§ñ **–°—Ç–∞—Ç—É—Å Userbot**

üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –ö–æ–º–∞–Ω–¥ –æ–±—Ä–æ–±–ª–µ–Ω–æ: {status.commands_processed}
‚Ä¢ –†–µ–∞–∫—Ü—ñ–π –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ: {status.reactions_sent}
‚Ä¢ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –æ–±—Ä–æ–±–ª–µ–Ω–æ: {status.messages_processed}

üîß **–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:**
‚Ä¢ `/gayporn` –∞–±–æ `/random` - –≤–∏–ø–∞–¥–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–∞–Ω–∞–ª—É
‚Ä¢ `/voice` (—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–µ) - –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ —Ç–µ–∫—Å—Ç
‚Ä¢ `/status` - —Ü–µ–π —Å—Ç–∞—Ç—É—Å

üî• **–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó:**
‚Ä¢ –†–µ–∞–∫—Ü—ñ—è ‚ù§Ô∏è‚Äçüî• –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ"
‚Ä¢ –í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è "–ü—É—Ç—ñ–Ω"
            """
            
            if status.last_error:
                status_text += f"\n‚ö†Ô∏è **–û—Å—Ç–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∞:** {status.last_error}"
            
            await event.reply(status_text)
            
        except Exception as e:
            await event.reply(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É: {str(e)}")

    print("‚úÖ All handlers registered successfully")
    return status
